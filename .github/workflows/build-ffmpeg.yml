name: Build FFmpeg

on:
  schedule:
    - cron: '0 0 * * *' # Runs every day
  workflow_dispatch: # Allows manual triggering 

jobs:
  build:
    runs-on: ffmpeg-builder
    env:
#      CC: gcc-14
#      CXX: g++-14
      CFLAGS: -O2 -pipe -flto=auto
      CXXFLAGS: -O2 -pipe -flto=auto
      LDFLAGS: -O2 -pipe -flto=auto
    steps:
      - name: Compare Commits
        run: |
          sudo apt-get update
          sudo apt-get install -y libdav1d-dev libaom-dev libfdk-aac-dev libvpx-dev libopus-dev libx264-dev libx265-dev zip
          
          git clone https://gitlab.com/AOMediaCodec/svt-av1.git svt-av1
          cd svt-av1
          git fetch origin
          git checkout master
          # Get the previous commit hash (this can be managed by storing it in GitHub Actions secrets or environment variable)
          previous_commit=$(cat ../previous_commit.txt || echo "none")

          if [ "$latest_commit" != "$previous_commit" ]; then
            echo "New commit detected: $latest_commit"
            echo "latestcommit=$latest_commit" > ../latestcommit.env
            echo "Build FFmpeg..."
          else
            echo "No new commits detected."
            exit 0
          fi

#      - name: Upload Variable Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: latestcommit
#          path: latestcommit.env
#
#      - name: Install Dependencies
#        run: |
#          sudo apt-get update -y
#          sudo apt-get install -y \
#            yasm \
#            nasm \
#            pkg-config \
#            git \
#            build-essential \
#            libx264-dev \
#            libx265-dev \
#            libvpx-dev \
#            libfdk-aac-dev \
#            libmp3lame-dev \
#            libopus-dev \
#            libvorbis-dev \
#            libass-dev \
#            wget \
#            autoconf \
#            automake \
#            cmake \
#            libtool
#          sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
#

      - name: Build SVT-AV1
        run: |
          mkdir bin
          cd svt-av1
          cd Build
          cmake .. -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc) && \
          sudo make install
      - name: Build x265
        run: |
          wget -O x265.tar.bz2 https://bitbucket.org/multicoreware/x265_git/get/master.tar.bz2 && \
          tar xjvf x265.tar.bz2 && \
          cd multicoreware*/build/linux && \
          PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" -DENABLE_SHARED=off ../../source && \
          PATH="$HOME/bin:$PATH" make -j$(nproc) && \
          sudo make install
#      - name: Build x264
#        run: |
#          git -C x264 pull 2> /dev/null || git clone --depth 1 https://code.videolan.org/videolan/x264.git && \
#          cd x264 && \
#          PATH="$HOME/bin:$PATH" PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure --prefix="$HOME/ffmpeg_build" --bindir="$HOME/bin" --enable-static --enable-pic && \
#          PATH="$HOME/bin:$PATH" make -j$(nproc) && \
#          make install
#      - name: Build libopus
#        run: |
#          git -C opus pull 2> /dev/null || git clone --depth 1 https://github.com/xiph/opus.git && \
#          cd opus && \
#          ./autogen.sh && \
#          ./configure --prefix="$HOME/ffmpeg_build" --disable-shared && \
#          make -j$(nproc) && \
#          make install
#      - name: Build libvpx
#        run: |
#          git -C libvpx pull 2> /dev/null || git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git && \
#          cd libvpx && \
#          PATH="$HOME/bin:$PATH" ./configure --prefix="$HOME/ffmpeg_build" --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=yasm && \
#          PATH="$HOME/bin:$PATH" make -j$(nproc) && \
#          make install
#      - name: Build fdk-aac
#        run: |
#          git -C fdk-aac pull 2> /dev/null || git clone --depth 1 https://github.com/mstorsjo/fdk-aac && \
#          cd fdk-aac && \
#          autoreconf -fiv && \
#          ./configure --prefix="$HOME/ffmpeg_build" --disable-shared && \
#          make -j$(nproc) && \
#          make install
#      - name: Build libdav1d
#        run: |
#          git -C dav1d pull 2> /dev/null || git clone --depth 1 https://code.videolan.org/videolan/dav1d.git && \
#          mkdir -p dav1d/build && \
#          cd dav1d/build && \
#          meson setup -Denable_tools=false -Denable_tests=false --default-library=static .. --prefix "$HOME/ffmpeg_build" --libdir="$HOME/ffmpeg_build/lib" && \
#          ninja && \
#          ninja install
#      - name: Build AOM
#        run: |
#          git -C aom pull 2> /dev/null || git clone --depth 1 https://aomedia.googlesource.com/aom && \
#          mkdir -p aom_build && \
#          cd aom_build && \
#          PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$HOME/ffmpeg_build" -DENABLE_TESTS=OFF -DENABLE_NASM=on ../aom && \
#          PATH="$HOME/bin:$PATH" make -j$(nproc) && \
#          make install
#        env:
#          CFLAGS: -O2 -pipe
#          CXXFLAGS: -O2 -pipe
#          LDFLAGS: -O2 -pipe

      - name: Clone FFmpeg
        run: |
          git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg
          cd ffmpeg
          git checkout master
      - name: Build FFmpeg
        run: |
          cd ffmpeg
          export LD_LIBRARY_PATH+=":/usr/local/lib"
          ./configure   --extra-cflags="-I$HOME/ffmpeg_build/include" --extra-ldflags="-L$HOME/ffmpeg_build/lib" --extra-libs="-lpthread -lm" --enable-gpl --enable-libx264 --enable-libx265 --enable-libvpx --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libass --enable-libsvtav1 --enable-libaom --enable-libdav1d --enable-nonfree --enable-static --pkg-config-flags="--static" --disable-shared
          make -j$(nproc)
          ./ffmpeg -version
        env:
          CFLAGS: -O2 -pipe
          CXXFLAGS: -O2 -pipe
          LDFLAGS: -O2 -pipe


      - name: Package FFmpeg
        run: |
          cd ffmpeg
          mkdir ffmpeg-package
          cp ./ffmpeg ffmpeg-package/
          cp ./ffprobe ffmpeg-package/
          zip -r ../ffmpeg-package.zip ffmpeg-package
      - name: version
        run: echo "::set-output name=version::$(./ffmpeg/ffmpeg -version |  cut -d " " -f 3 | grep N)"
        id: version
      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: upload linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ffmpeg-package.zip
          asset_name: ffmpeg-package.zip
          asset_content_type: application/zip