name: Build FFmpeg

on:
  schedule:
    - cron: '0 0 * * *' # Runs every day
  workflow_dispatch: # Allows manual triggering 

jobs:
  build:
    runs-on: ffmpeg-builder
    env:
      CFLAGS: -O2 -pipe -flto
      CXXFLAGS: -O2 -pipe -flto
      LDFLAGS: -O2 -pipe -flto
    steps:
      - name: Compare Commits
        run: |
          git clone https://gitlab.com/AOMediaCodec/svt-av1.git svt-av1
          cd svt-av1
          git fetch origin
          git checkout master
          # Get the previous commit hash (this can be managed by storing it in GitHub Actions secrets or environment variable)
          previous_commit=$(cat ../previous_commit.txt || echo "none")

          if [ "$latest_commit" != "$previous_commit" ]; then
            echo "New commit detected: $latest_commit"
            echo "latestcommit=$latest_commit" > ../previous_commit.txt
            echo "Build FFmpeg..."
          else
            echo "No new commits detected."
            exit 0
          fi
      - name: Upload Variable Artifact
        uses: actions/upload-artifact@v4
        with:
          name: latestcommit
          path: latestcommit.env

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            yasm \
            nasm \
            cmake \
            pkg-config \
            git \
            build-essential \
            libx264-dev \
            libx265-dev \
            libvpx-dev \
            libfdk-aac-dev \
            libmp3lame-dev \
            libopus-dev \
            libvorbis-dev \
            libass-dev

      - name: Build SVT-AV1
        run: |
          cd svt-av1
          cd Build
          cmake .. -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
          make -j $(nproc)
          sudo make install

      - name: Clone FFmpeg
        run: |
          git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg
          cd ffmpeg
          git checkout master

      - name: Build FFmpeg
        run: |
          cd ffmpeg
          export LD_LIBRARY_PATH+=":/usr/local/lib"
          export PKG_CONFIG_PATH+=":/usr/local/lib/pkgconfig"
          ./configure --enable-gpl --enable-libx264 --enable-libx265 --enable-libvpx --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libass --enable-libsvtav1 --enable-nonfree --enable-static --pkg-config-flags="--static" --disable-shared
          make -j$(nproc)
          ./ffmpeg -version


      - name: Package FFmpeg
        run: |
          cd ffmpeg
          mkdir ffmpeg-package
          cp ./ffmpeg ffmpeg-package/
          cp ./ffplay ffmpeg-package/
          cp ./ffprobe ffmpeg-package/
          zip -r ffmpeg-package.zip ffmpeg-package

      - name: Create Release
        id: create_release
        run: |
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          REPO=${{ github.repository }}
          VERSION=$(date +%Y%m%d%H%M%S) # Create a version tag
          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/$REPO/releases \
          -d "{\"tag_name\": \"v$VERSION\", \"name\": \"FFmpeg Release v$VERSION\"}" | jq -r .id

      - name: Upload FFmpeg Package
        run: |
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          REPO=${{ github.repository }}
          VERSION=$(date +%Y%m%d%H%M%S)
          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/zip" \
          --data-binary @ffmpeg-package.zip \
          "https://uploads.github.com/repos/$REPO/releases/${{ steps.create_release.outputs.id }}/assets?name=ffmpeg-package.zip"
