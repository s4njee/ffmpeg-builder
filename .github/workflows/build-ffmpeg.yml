name: Build FFmpeg

on:
  schedule:
    - cron: '0 0 * * *' # Runs every day
  workflow_dispatch: # Allows manual triggering 

jobs:
  build:
    runs-on: ffmpeg-builder
    env:
      CFLAGS: -O2 -pipe -flto=auto
      CXXFLAGS: -O2 -pipe -flto=auto
      LDFLAGS: -O2 -pipe -flto=auto
    steps:
      - name: Compare Commits
        run: |
          git clone https://gitlab.com/AOMediaCodec/svt-av1.git svt-av1
          cd svt-av1
          git fetch origin
          git checkout master
          # Get the previous commit hash (this can be managed by storing it in GitHub Actions secrets or environment variable)
          previous_commit=$(cat ../previous_commit.txt || echo "none")

          if [ "$latest_commit" != "$previous_commit" ]; then
            echo "New commit detected: $latest_commit"
            echo "latestcommit=$latest_commit" > ../latestcommit.env
            echo "Build FFmpeg..."
          else
            echo "No new commits detected."
            exit 0
          fi
#      - name: Upload Variable Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: latestcommit
#          path: latestcommit.env
#
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            yasm \
            nasm \
            cmake \
            pkg-config \
            git \
            build-essential \
            libx264-dev \
            libx265-dev \
            libvpx-dev \
            libfdk-aac-dev \
            libmp3lame-dev \
            libopus-dev \
            libvorbis-dev \
            libass-dev

      - name: Build SVT-AV1
        run: |
          mkdir bin
          cd svt-av1
          cd Build
          PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$HOME/ffmpeg_build" -DCMAKE_BUILD_TYPE=Release -DBUILD_DEC=OFF -DBUILD_SHARED_LIBS=OFF .. && \
          PATH="$HOME/bin:$PATH" make -j$(nproc) && \
          make install
          cd ..
          wget -O x265.tar.bz2 https://bitbucket.org/multicoreware/x265_git/get/master.tar.bz2 && \
          tar xjvf x265.tar.bz2 && \
          cd multicoreware*/build/linux && \
          PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$HOME/ffmpeg_build" -DENABLE_SHARED=off ../../source && \
          PATH="$HOME/bin:$PATH" make -j$(nproc && \
          make install
          cd .. && \
          git -C x264 pull 2> /dev/null || git clone --depth 1 https://code.videolan.org/videolan/x264.git && \
          cd x264 && \
          PATH="$HOME/bin:$PATH" PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure --prefix="$HOME/ffmpeg_build" --bindir="$HOME/bin" --enable-static --enable-pic && \
          PATH="$HOME/bin:$PATH" make -j$(nproc) && \
          make install 
          cd ..
          git -C opus pull 2> /dev/null || git clone --depth 1 https://github.com/xiph/opus.git && \
          cd opus && \
          ./autogen.sh && \
          ./configure --prefix="$HOME/ffmpeg_build" --disable-shared && \
          make -j$(nproc) && \
          make install
          cd ..
          git -C libvpx pull 2> /dev/null || git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git && \
          cd libvpx && \
          PATH="$HOME/bin:$PATH" ./configure --prefix="$HOME/ffmpeg_build" --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=yasm && \
          PATH="$HOME/bin:$PATH" make -j$(nproc) && \
          make install
          cd ..
          git -C fdk-aac pull 2> /dev/null || git clone --depth 1 https://github.com/mstorsjo/fdk-aac && \
          cd fdk-aac && \
          autoreconf -fiv && \
          ./configure --prefix="$HOME/ffmpeg_build" --disable-shared && \
          make -j$(nproc) && \
          make install
          cd ..
          git -C aom pull 2> /dev/null || git clone --depth 1 https://aomedia.googlesource.com/aom && \
          mkdir -p aom_build && \
          cd aom_build && \
          PATH="$HOME/bin:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$HOME/ffmpeg_build" -DENABLE_TESTS=OFF -DENABLE_NASM=on ../aom && \
          PATH="$HOME/bin:$PATH" make -j$(nproc) && \
          make install

      - name: Clone FFmpeg
        run: |
          git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg
          cd ffmpeg
          git checkout master

      - name: Build FFmpeg
        run: |
          cd ffmpeg
          export LD_LIBRARY_PATH+=":/usr/local/lib"
          PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure --enable-gpl --enable-libx264 --enable-libx265 --enable-libvpx --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libass --enable-libsvtav1 --enable-libaom --enable-nonfree --enable-static --pkg-config-flags="--static" --disable-shared
          make -j$(nproc)
          ./ffmpeg -version


      - name: Package FFmpeg
        run: |
          cd ffmpeg
          mkdir ffmpeg-package
          cp ./ffmpeg ffmpeg-package/
          cp ./ffplay ffmpeg-package/
          cp ./ffprobe ffmpeg-package/
          zip -r ffmpeg-package.zip ffmpeg-package

      - name: Create Release
        id: create_release
        run: |
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          REPO=${{ github.repository }}
          VERSION=$(date +%Y%m%d%H%M%S) # Create a version tag
          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/$REPO/releases \
          -d "{\"tag_name\": \"v$VERSION\", \"name\": \"FFmpeg Release v$VERSION\"}" | jq -r .id

      - name: Upload FFmpeg Package
        run: |
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          REPO=${{ github.repository }}
          VERSION=$(date +%Y%m%d%H%M%S)
          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/zip" \
          --data-binary @ffmpeg-package.zip \
          "https://uploads.github.com/repos/$REPO/releases/${{ steps.create_release.outputs.id }}/assets?name=ffmpeg-package.zip"
